
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000007b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a74  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000814  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000643  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000021b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000116  00000000  00000000  00002785  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000289b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  88:	0c 94 9c 03 	jmp	0x738	; 0x738 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <mapADCtoServo1>:
uint8_t alternador_pots = 0;

void setup(void);

uint16_t mapADCtoServo1(uint8_t valor_ADC1){
	return (uint16_t)(((float)valor_ADC1/255)*(149.88-37.47)+37.47);
  90:	68 2f       	mov	r22, r24
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 a1 02 	call	0x542	; 0x542 <__floatunsisf>
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	4f e7       	ldi	r20, 0x7F	; 127
  a2:	53 e4       	ldi	r21, 0x43	; 67
  a4:	0e 94 00 02 	call	0x400	; 0x400 <__divsf3>
  a8:	2c ee       	ldi	r18, 0xEC	; 236
  aa:	31 ed       	ldi	r19, 0xD1	; 209
  ac:	40 ee       	ldi	r20, 0xE0	; 224
  ae:	52 e4       	ldi	r21, 0x42	; 66
  b0:	0e 94 2f 03 	call	0x65e	; 0x65e <__mulsf3>
  b4:	28 e4       	ldi	r18, 0x48	; 72
  b6:	31 ee       	ldi	r19, 0xE1	; 225
  b8:	45 e1       	ldi	r20, 0x15	; 21
  ba:	52 e4       	ldi	r21, 0x42	; 66
  bc:	0e 94 94 01 	call	0x328	; 0x328 <__addsf3>
  c0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fixunssfsi>
}
  c4:	cb 01       	movw	r24, r22
  c6:	08 95       	ret

000000c8 <mapADCtoServo2>:

uint8_t mapADCtoServo2(uint8_t valor_ADC2){
	return (uint8_t)(((float)valor_ADC2/255)*(31-8)+8);
  c8:	68 2f       	mov	r22, r24
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 a1 02 	call	0x542	; 0x542 <__floatunsisf>
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	4f e7       	ldi	r20, 0x7F	; 127
  da:	53 e4       	ldi	r21, 0x43	; 67
  dc:	0e 94 00 02 	call	0x400	; 0x400 <__divsf3>
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	48 eb       	ldi	r20, 0xB8	; 184
  e6:	51 e4       	ldi	r21, 0x41	; 65
  e8:	0e 94 2f 03 	call	0x65e	; 0x65e <__mulsf3>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	51 e4       	ldi	r21, 0x41	; 65
  f4:	0e 94 94 01 	call	0x328	; 0x328 <__addsf3>
  f8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fixunssfsi>
  fc:	86 2f       	mov	r24, r22
}
  fe:	08 95       	ret

00000100 <init_ADC>:
		intensity_changer(valor_pot3);
    }
}

void init_ADC(void){
	ADMUX = 0;
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	10 82       	st	Z, r1
	// Vref = AVCC = 5V
	ADMUX |= (1<<REFS0);
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
	// Justificado a la izquierda
	ADMUX |= (1<<ADLAR);
 10c:	80 81       	ld	r24, Z
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	80 83       	st	Z, r24
	// Selección del canal A7
	//ADMUX |= 0x07;
	ADCSRA = 0;
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	10 82       	st	Z, r1
	// Habilitar ADC
	ADCSRA |= (1<<ADEN);
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	80 83       	st	Z, r24
	// Habilitar auto-trigger
	//ADCSRA |= (1<<ADATE);
	// Máscara de la interrupción del ADC
	ADCSRA |= (1<<ADIE);
 11e:	80 81       	ld	r24, Z
 120:	88 60       	ori	r24, 0x08	; 8
 122:	80 83       	st	Z, r24
	// Prescaler del ADC a 128
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 124:	80 81       	ld	r24, Z
 126:	87 60       	ori	r24, 0x07	; 7
 128:	80 83       	st	Z, r24
	
	ADCSRB = 0;
 12a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	
	DIDR0 |= (1<<ADC1D);
 12e:	ae e7       	ldi	r26, 0x7E	; 126
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	8c 91       	ld	r24, X
 134:	82 60       	ori	r24, 0x02	; 2
 136:	8c 93       	st	X, r24
	
	// Iniciar primera conversión
	ADCSRA |= (1<<ADSC);
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <setup>:
	
}

void setup(void){
	cli();
 140:	f8 94       	cli
	DDRC = 0;
 142:	17 b8       	out	0x07, r1	; 7
 	init_PWM1_Fast();
 144:	0e 94 29 01 	call	0x252	; 0x252 <init_PWM1_Fast>
	init_PWM2_Fast();
 148:	0e 94 4a 01 	call	0x294	; 0x294 <init_PWM2_Fast>
	init_PWMM();
 14c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <init_PWMM>
	//TIMSK2 |= (1<<TOIE2);
	init_ADC();
 150:	0e 94 80 00 	call	0x100	; 0x100 <init_ADC>
	sei();
 154:	78 94       	sei
 156:	08 95       	ret

00000158 <main>:
}

int main(void)
{
    /* Replace with your application code */
	CLKPR = (1<<CLKPCE);
 158:	e1 e6       	ldi	r30, 0x61	; 97
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	80 83       	st	Z, r24
	CLKPR = (1<<CLKPS1);
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	80 83       	st	Z, r24
	setup();
 164:	0e 94 a0 00 	call	0x140	; 0x140 <setup>
		ADMUX = ((ADMUX & ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0))) | ((1<<MUX2)|(1<<MUX1)|(1<<MUX0)));
		ADCSRA |= (1<<ADEN);
		ADCSRA |= (1<<ADSC);
		_delay_ms(100);
		valor_pot1 = ADCH;*/
		dutyCycle1 = mapADCtoServo1(valor_pot1);
 168:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <valor_pot1>
 16c:	0e 94 48 00 	call	0x90	; 0x90 <mapADCtoServo1>
 170:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <dutyCycle1+0x1>
 174:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyCycle1>
		updateDutyCycle1A(dutyCycle1);
 178:	0e 94 45 01 	call	0x28a	; 0x28a <updateDutyCycle1A>
		ADMUX = ((ADMUX & ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0))) | (1<<MUX0));
		ADCSRA |= (1<<ADEN);
		ADCSRA |= (1<<ADSC);
		_delay_ms(100);
		valor_pot2 = ADCH;*/
		dutyCycle2 = mapADCtoServo2(valor_pot2);
 17c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <valor_pot2>
 180:	0e 94 64 00 	call	0xc8	; 0xc8 <mapADCtoServo2>
 184:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dutyCycle2>
		updateDutyCycle2A(dutyCycle2);
 188:	0e 94 5d 01 	call	0x2ba	; 0x2ba <updateDutyCycle2A>
		//ADCSRA |= (1<<ADSC);
		intensity_changer(valor_pot3);
 18c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <valor_pot3>
 190:	0e 94 6e 01 	call	0x2dc	; 0x2dc <intensity_changer>
 194:	e9 cf       	rjmp	.-46     	; 0x168 <main+0x10>

00000196 <__vector_21>:
	//TIMSK2 |= (1<<TOIE2);
	init_ADC();
	sei();
}

ISR(ADC_vect){
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	ADCSRA &= ~(1<<ADEN);
 1a6:	ea e7       	ldi	r30, 0x7A	; 122
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8f 77       	andi	r24, 0x7F	; 127
 1ae:	80 83       	st	Z, r24
	if (alternador_pots==0)
 1b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b4:	81 11       	cpse	r24, r1
 1b6:	0f c0       	rjmp	.+30     	; 0x1d6 <__vector_21+0x40>
	{
		
		//valor_pot1 = 150;
		ADMUX = ((ADMUX & ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0))) | ((1<<MUX2)|(1<<MUX1)|(1<<MUX0)));
 1b8:	ec e7       	ldi	r30, 0x7C	; 124
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	87 60       	ori	r24, 0x07	; 7
 1c0:	80 83       	st	Z, r24
		valor_pot1 = ADCH;
 1c2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1c6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <valor_pot1>
		//ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));
		//ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0);
		alternador_pots += 1;
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d4:	1d c0       	rjmp	.+58     	; 0x210 <__vector_21+0x7a>
	} 
	else if (alternador_pots == 1)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	81 f4       	brne	.+32     	; 0x1fa <__vector_21+0x64>
	{
		
		//valor_pot2 = 150;
		ADMUX = ((ADMUX & ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0))) | (1<<MUX0));
 1da:	ec e7       	ldi	r30, 0x7C	; 124
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	88 7f       	andi	r24, 0xF8	; 248
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	80 83       	st	Z, r24
		valor_pot2 = ADCH;
 1e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ea:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot2>
		//ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));
		//ADMUX |= (1<<MUX0);
		alternador_pots += 1;
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f8:	0b c0       	rjmp	.+22     	; 0x210 <__vector_21+0x7a>
	} else {
		ADMUX = (ADMUX & ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0)));
 1fa:	ec e7       	ldi	r30, 0x7C	; 124
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	88 7f       	andi	r24, 0xF8	; 248
 202:	80 83       	st	Z, r24
		valor_pot3 = ADCH;
 204:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 208:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <valor_pot3>
		alternador_pots = 0;
 20c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	ADCSRA |= (1<<ADEN);
 210:	ea e7       	ldi	r30, 0x7A	; 122
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 68       	ori	r24, 0x80	; 128
 218:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 21a:	80 81       	ld	r24, Z
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIF);
 220:	80 81       	ld	r24, Z
 222:	80 61       	ori	r24, 0x10	; 16
 224:	80 83       	st	Z, r24
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_16>:

ISR(TIMER0_OVF_vect){
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	8f 93       	push	r24
	TCNT0 = 61;
 242:	8d e3       	ldi	r24, 0x3D	; 61
 244:	86 bd       	out	0x26, r24	; 38
}
 246:	8f 91       	pop	r24
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <init_PWM1_Fast>:
 */ 

#include "PWM1.h"

void init_PWM1_Fast(void){
	DDRB |= (1 << DDB1);
 252:	84 b1       	in	r24, 0x04	; 4
 254:	82 60       	ori	r24, 0x02	; 2
 256:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A = 0;
 258:	a0 e8       	ldi	r26, 0x80	; 128
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	1c 92       	st	X, r1
	TCCR1B = 0;
 25e:	e1 e8       	ldi	r30, 0x81	; 129
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	10 82       	st	Z, r1
	TCCR1A |= (1<<COM1A1);
 264:	8c 91       	ld	r24, X
 266:	80 68       	ori	r24, 0x80	; 128
 268:	8c 93       	st	X, r24
	
	TCCR1A |= (1<<WGM11);
 26a:	8c 91       	ld	r24, X
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12)|(1<<WGM13);
 270:	80 81       	ld	r24, Z
 272:	88 61       	ori	r24, 0x18	; 24
 274:	80 83       	st	Z, r24
	
	//PRESCALER DE 64
	TCCR1B |= (1<<CS11)|(1<<CS10);
 276:	80 81       	ld	r24, Z
 278:	83 60       	ori	r24, 0x03	; 3
 27a:	80 83       	st	Z, r24
	
	
	//TOP DE 1249
	ICR1H = 0x04;
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 0xE1;
 282:	81 ee       	ldi	r24, 0xE1	; 225
 284:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 288:	08 95       	ret

0000028a <updateDutyCycle1A>:
	/*uint8_t temp = duty;
	OCR1AL = temp;
	duty >>= 8;
	temp = duty;
	OCR1AH = temp;*/
	OCR1AH = (duty & 0xFF00) >> 8;
 28a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (duty & 0x00FF);
 28e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 292:	08 95       	ret

00000294 <init_PWM2_Fast>:
 */ 

#include "PWM2.h"

void init_PWM2_Fast(void){
	DDRB |= (1 << DDB3);
 294:	84 b1       	in	r24, 0x04	; 4
 296:	88 60       	ori	r24, 0x08	; 8
 298:	84 b9       	out	0x04, r24	; 4
	
	TCCR2A = 0;
 29a:	e0 eb       	ldi	r30, 0xB0	; 176
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	10 82       	st	Z, r1
	TCCR2B = 0;
 2a0:	a1 eb       	ldi	r26, 0xB1	; 177
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	1c 92       	st	X, r1
	TCCR2A |= (1<<COM2A1);
 2a6:	80 81       	ld	r24, Z
 2a8:	80 68       	ori	r24, 0x80	; 128
 2aa:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
 2ac:	80 81       	ld	r24, Z
 2ae:	83 60       	ori	r24, 0x03	; 3
 2b0:	80 83       	st	Z, r24
	//TCCR2B |= (1<<WGM22);
	
	//PRESCALER DE 1024
	TCCR2B |= (1<<CS22)|(1<<CS21)/*|(1<<CS20)*/;
 2b2:	8c 91       	ld	r24, X
 2b4:	86 60       	ori	r24, 0x06	; 6
 2b6:	8c 93       	st	X, r24
 2b8:	08 95       	ret

000002ba <updateDutyCycle2A>:
	/*uint8_t temp = duty;
	OCR1AL = temp;
	duty >>= 8;
	temp = duty;
	OCR1AH = temp;*/
	OCR2A = duty;
 2ba:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 2be:	08 95       	ret

000002c0 <init_PWMM>:
 */ 

#include "PWMM.h"

void init_PWMM(void){
	DDRD |= (1<<DDD2);
 2c0:	8a b1       	in	r24, 0x0a	; 10
 2c2:	84 60       	ori	r24, 0x04	; 4
 2c4:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0B |= (1 << CS02);//|(1 << CS00);
 2c6:	85 b5       	in	r24, 0x25	; 37
 2c8:	84 60       	ori	r24, 0x04	; 4
 2ca:	85 bd       	out	0x25, r24	; 37
	
	TIMSK0 |= (1 << TOIE0);
 2cc:	ee e6       	ldi	r30, 0x6E	; 110
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	80 83       	st	Z, r24
	
	TCNT0 = 61;
 2d6:	8d e3       	ldi	r24, 0x3D	; 61
 2d8:	86 bd       	out	0x26, r24	; 38
 2da:	08 95       	ret

000002dc <intensity_changer>:
}

void intensity_changer(uint8_t intensidad){
	uint8_t valor = (uint8_t)(((float)intensidad/255)*(255-61)+61); 
 2dc:	68 2f       	mov	r22, r24
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 a1 02 	call	0x542	; 0x542 <__floatunsisf>
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	4f e7       	ldi	r20, 0x7F	; 127
 2ee:	53 e4       	ldi	r21, 0x43	; 67
 2f0:	0e 94 00 02 	call	0x400	; 0x400 <__divsf3>
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	42 e4       	ldi	r20, 0x42	; 66
 2fa:	53 e4       	ldi	r21, 0x43	; 67
 2fc:	0e 94 2f 03 	call	0x65e	; 0x65e <__mulsf3>
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	44 e7       	ldi	r20, 0x74	; 116
 306:	52 e4       	ldi	r21, 0x42	; 66
 308:	0e 94 94 01 	call	0x328	; 0x328 <__addsf3>
 30c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fixunssfsi>
	if (TCNT0 <= valor)
 310:	86 b5       	in	r24, 0x26	; 38
 312:	68 17       	cp	r22, r24
 314:	20 f0       	brcs	.+8      	; 0x31e <intensity_changer+0x42>
	{
		PORTD |= (1 << PORTD2);
 316:	8b b1       	in	r24, 0x0b	; 11
 318:	84 60       	ori	r24, 0x04	; 4
 31a:	8b b9       	out	0x0b, r24	; 11
 31c:	08 95       	ret
	} 
	else
	{
		PORTD &= ~(1 << PORTD2);
 31e:	8b b1       	in	r24, 0x0b	; 11
 320:	8b 7f       	andi	r24, 0xFB	; 251
 322:	8b b9       	out	0x0b, r24	; 11
 324:	08 95       	ret

00000326 <__subsf3>:
 326:	50 58       	subi	r21, 0x80	; 128

00000328 <__addsf3>:
 328:	bb 27       	eor	r27, r27
 32a:	aa 27       	eor	r26, r26
 32c:	0e 94 ab 01 	call	0x356	; 0x356 <__addsf3x>
 330:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_round>
 334:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_pscA>
 338:	38 f0       	brcs	.+14     	; 0x348 <__addsf3+0x20>
 33a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__fp_pscB>
 33e:	20 f0       	brcs	.+8      	; 0x348 <__addsf3+0x20>
 340:	39 f4       	brne	.+14     	; 0x350 <__addsf3+0x28>
 342:	9f 3f       	cpi	r25, 0xFF	; 255
 344:	19 f4       	brne	.+6      	; 0x34c <__addsf3+0x24>
 346:	26 f4       	brtc	.+8      	; 0x350 <__addsf3+0x28>
 348:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_nan>
 34c:	0e f4       	brtc	.+2      	; 0x350 <__addsf3+0x28>
 34e:	e0 95       	com	r30
 350:	e7 fb       	bst	r30, 7
 352:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__fp_inf>

00000356 <__addsf3x>:
 356:	e9 2f       	mov	r30, r25
 358:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_split3>
 35c:	58 f3       	brcs	.-42     	; 0x334 <__addsf3+0xc>
 35e:	ba 17       	cp	r27, r26
 360:	62 07       	cpc	r22, r18
 362:	73 07       	cpc	r23, r19
 364:	84 07       	cpc	r24, r20
 366:	95 07       	cpc	r25, r21
 368:	20 f0       	brcs	.+8      	; 0x372 <__addsf3x+0x1c>
 36a:	79 f4       	brne	.+30     	; 0x38a <__addsf3x+0x34>
 36c:	a6 f5       	brtc	.+104    	; 0x3d6 <__addsf3x+0x80>
 36e:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_zero>
 372:	0e f4       	brtc	.+2      	; 0x376 <__addsf3x+0x20>
 374:	e0 95       	com	r30
 376:	0b 2e       	mov	r0, r27
 378:	ba 2f       	mov	r27, r26
 37a:	a0 2d       	mov	r26, r0
 37c:	0b 01       	movw	r0, r22
 37e:	b9 01       	movw	r22, r18
 380:	90 01       	movw	r18, r0
 382:	0c 01       	movw	r0, r24
 384:	ca 01       	movw	r24, r20
 386:	a0 01       	movw	r20, r0
 388:	11 24       	eor	r1, r1
 38a:	ff 27       	eor	r31, r31
 38c:	59 1b       	sub	r21, r25
 38e:	99 f0       	breq	.+38     	; 0x3b6 <__addsf3x+0x60>
 390:	59 3f       	cpi	r21, 0xF9	; 249
 392:	50 f4       	brcc	.+20     	; 0x3a8 <__addsf3x+0x52>
 394:	50 3e       	cpi	r21, 0xE0	; 224
 396:	68 f1       	brcs	.+90     	; 0x3f2 <__addsf3x+0x9c>
 398:	1a 16       	cp	r1, r26
 39a:	f0 40       	sbci	r31, 0x00	; 0
 39c:	a2 2f       	mov	r26, r18
 39e:	23 2f       	mov	r18, r19
 3a0:	34 2f       	mov	r19, r20
 3a2:	44 27       	eor	r20, r20
 3a4:	58 5f       	subi	r21, 0xF8	; 248
 3a6:	f3 cf       	rjmp	.-26     	; 0x38e <__addsf3x+0x38>
 3a8:	46 95       	lsr	r20
 3aa:	37 95       	ror	r19
 3ac:	27 95       	ror	r18
 3ae:	a7 95       	ror	r26
 3b0:	f0 40       	sbci	r31, 0x00	; 0
 3b2:	53 95       	inc	r21
 3b4:	c9 f7       	brne	.-14     	; 0x3a8 <__addsf3x+0x52>
 3b6:	7e f4       	brtc	.+30     	; 0x3d6 <__addsf3x+0x80>
 3b8:	1f 16       	cp	r1, r31
 3ba:	ba 0b       	sbc	r27, r26
 3bc:	62 0b       	sbc	r22, r18
 3be:	73 0b       	sbc	r23, r19
 3c0:	84 0b       	sbc	r24, r20
 3c2:	ba f0       	brmi	.+46     	; 0x3f2 <__addsf3x+0x9c>
 3c4:	91 50       	subi	r25, 0x01	; 1
 3c6:	a1 f0       	breq	.+40     	; 0x3f0 <__addsf3x+0x9a>
 3c8:	ff 0f       	add	r31, r31
 3ca:	bb 1f       	adc	r27, r27
 3cc:	66 1f       	adc	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	88 1f       	adc	r24, r24
 3d2:	c2 f7       	brpl	.-16     	; 0x3c4 <__addsf3x+0x6e>
 3d4:	0e c0       	rjmp	.+28     	; 0x3f2 <__addsf3x+0x9c>
 3d6:	ba 0f       	add	r27, r26
 3d8:	62 1f       	adc	r22, r18
 3da:	73 1f       	adc	r23, r19
 3dc:	84 1f       	adc	r24, r20
 3de:	48 f4       	brcc	.+18     	; 0x3f2 <__addsf3x+0x9c>
 3e0:	87 95       	ror	r24
 3e2:	77 95       	ror	r23
 3e4:	67 95       	ror	r22
 3e6:	b7 95       	ror	r27
 3e8:	f7 95       	ror	r31
 3ea:	9e 3f       	cpi	r25, 0xFE	; 254
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <__addsf3x+0x9a>
 3ee:	b0 cf       	rjmp	.-160    	; 0x350 <__addsf3+0x28>
 3f0:	93 95       	inc	r25
 3f2:	88 0f       	add	r24, r24
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <__addsf3x+0xa2>
 3f6:	99 27       	eor	r25, r25
 3f8:	ee 0f       	add	r30, r30
 3fa:	97 95       	ror	r25
 3fc:	87 95       	ror	r24
 3fe:	08 95       	ret

00000400 <__divsf3>:
 400:	0e 94 14 02 	call	0x428	; 0x428 <__divsf3x>
 404:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_round>
 408:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__fp_pscB>
 40c:	58 f0       	brcs	.+22     	; 0x424 <__divsf3+0x24>
 40e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_pscA>
 412:	40 f0       	brcs	.+16     	; 0x424 <__divsf3+0x24>
 414:	29 f4       	brne	.+10     	; 0x420 <__divsf3+0x20>
 416:	5f 3f       	cpi	r21, 0xFF	; 255
 418:	29 f0       	breq	.+10     	; 0x424 <__divsf3+0x24>
 41a:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__fp_inf>
 41e:	51 11       	cpse	r21, r1
 420:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_szero>
 424:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_nan>

00000428 <__divsf3x>:
 428:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_split3>
 42c:	68 f3       	brcs	.-38     	; 0x408 <__divsf3+0x8>

0000042e <__divsf3_pse>:
 42e:	99 23       	and	r25, r25
 430:	b1 f3       	breq	.-20     	; 0x41e <__divsf3+0x1e>
 432:	55 23       	and	r21, r21
 434:	91 f3       	breq	.-28     	; 0x41a <__divsf3+0x1a>
 436:	95 1b       	sub	r25, r21
 438:	55 0b       	sbc	r21, r21
 43a:	bb 27       	eor	r27, r27
 43c:	aa 27       	eor	r26, r26
 43e:	62 17       	cp	r22, r18
 440:	73 07       	cpc	r23, r19
 442:	84 07       	cpc	r24, r20
 444:	38 f0       	brcs	.+14     	; 0x454 <__divsf3_pse+0x26>
 446:	9f 5f       	subi	r25, 0xFF	; 255
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	22 0f       	add	r18, r18
 44c:	33 1f       	adc	r19, r19
 44e:	44 1f       	adc	r20, r20
 450:	aa 1f       	adc	r26, r26
 452:	a9 f3       	breq	.-22     	; 0x43e <__divsf3_pse+0x10>
 454:	35 d0       	rcall	.+106    	; 0x4c0 <__divsf3_pse+0x92>
 456:	0e 2e       	mov	r0, r30
 458:	3a f0       	brmi	.+14     	; 0x468 <__divsf3_pse+0x3a>
 45a:	e0 e8       	ldi	r30, 0x80	; 128
 45c:	32 d0       	rcall	.+100    	; 0x4c2 <__divsf3_pse+0x94>
 45e:	91 50       	subi	r25, 0x01	; 1
 460:	50 40       	sbci	r21, 0x00	; 0
 462:	e6 95       	lsr	r30
 464:	00 1c       	adc	r0, r0
 466:	ca f7       	brpl	.-14     	; 0x45a <__divsf3_pse+0x2c>
 468:	2b d0       	rcall	.+86     	; 0x4c0 <__divsf3_pse+0x92>
 46a:	fe 2f       	mov	r31, r30
 46c:	29 d0       	rcall	.+82     	; 0x4c0 <__divsf3_pse+0x92>
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	bb 1f       	adc	r27, r27
 476:	26 17       	cp	r18, r22
 478:	37 07       	cpc	r19, r23
 47a:	48 07       	cpc	r20, r24
 47c:	ab 07       	cpc	r26, r27
 47e:	b0 e8       	ldi	r27, 0x80	; 128
 480:	09 f0       	breq	.+2      	; 0x484 <__divsf3_pse+0x56>
 482:	bb 0b       	sbc	r27, r27
 484:	80 2d       	mov	r24, r0
 486:	bf 01       	movw	r22, r30
 488:	ff 27       	eor	r31, r31
 48a:	93 58       	subi	r25, 0x83	; 131
 48c:	5f 4f       	sbci	r21, 0xFF	; 255
 48e:	3a f0       	brmi	.+14     	; 0x49e <__divsf3_pse+0x70>
 490:	9e 3f       	cpi	r25, 0xFE	; 254
 492:	51 05       	cpc	r21, r1
 494:	78 f0       	brcs	.+30     	; 0x4b4 <__divsf3_pse+0x86>
 496:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__fp_inf>
 49a:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_szero>
 49e:	5f 3f       	cpi	r21, 0xFF	; 255
 4a0:	e4 f3       	brlt	.-8      	; 0x49a <__divsf3_pse+0x6c>
 4a2:	98 3e       	cpi	r25, 0xE8	; 232
 4a4:	d4 f3       	brlt	.-12     	; 0x49a <__divsf3_pse+0x6c>
 4a6:	86 95       	lsr	r24
 4a8:	77 95       	ror	r23
 4aa:	67 95       	ror	r22
 4ac:	b7 95       	ror	r27
 4ae:	f7 95       	ror	r31
 4b0:	9f 5f       	subi	r25, 0xFF	; 255
 4b2:	c9 f7       	brne	.-14     	; 0x4a6 <__divsf3_pse+0x78>
 4b4:	88 0f       	add	r24, r24
 4b6:	91 1d       	adc	r25, r1
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	97 f9       	bld	r25, 7
 4be:	08 95       	ret
 4c0:	e1 e0       	ldi	r30, 0x01	; 1
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	88 1f       	adc	r24, r24
 4c8:	bb 1f       	adc	r27, r27
 4ca:	62 17       	cp	r22, r18
 4cc:	73 07       	cpc	r23, r19
 4ce:	84 07       	cpc	r24, r20
 4d0:	ba 07       	cpc	r27, r26
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <__divsf3_pse+0xae>
 4d4:	62 1b       	sub	r22, r18
 4d6:	73 0b       	sbc	r23, r19
 4d8:	84 0b       	sbc	r24, r20
 4da:	ba 0b       	sbc	r27, r26
 4dc:	ee 1f       	adc	r30, r30
 4de:	88 f7       	brcc	.-30     	; 0x4c2 <__divsf3_pse+0x94>
 4e0:	e0 95       	com	r30
 4e2:	08 95       	ret

000004e4 <__fixunssfsi>:
 4e4:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_splitA>
 4e8:	88 f0       	brcs	.+34     	; 0x50c <__fixunssfsi+0x28>
 4ea:	9f 57       	subi	r25, 0x7F	; 127
 4ec:	98 f0       	brcs	.+38     	; 0x514 <__fixunssfsi+0x30>
 4ee:	b9 2f       	mov	r27, r25
 4f0:	99 27       	eor	r25, r25
 4f2:	b7 51       	subi	r27, 0x17	; 23
 4f4:	b0 f0       	brcs	.+44     	; 0x522 <__fixunssfsi+0x3e>
 4f6:	e1 f0       	breq	.+56     	; 0x530 <__fixunssfsi+0x4c>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	1a f0       	brmi	.+6      	; 0x508 <__fixunssfsi+0x24>
 502:	ba 95       	dec	r27
 504:	c9 f7       	brne	.-14     	; 0x4f8 <__fixunssfsi+0x14>
 506:	14 c0       	rjmp	.+40     	; 0x530 <__fixunssfsi+0x4c>
 508:	b1 30       	cpi	r27, 0x01	; 1
 50a:	91 f0       	breq	.+36     	; 0x530 <__fixunssfsi+0x4c>
 50c:	0e 94 28 03 	call	0x650	; 0x650 <__fp_zero>
 510:	b1 e0       	ldi	r27, 0x01	; 1
 512:	08 95       	ret
 514:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_zero>
 518:	67 2f       	mov	r22, r23
 51a:	78 2f       	mov	r23, r24
 51c:	88 27       	eor	r24, r24
 51e:	b8 5f       	subi	r27, 0xF8	; 248
 520:	39 f0       	breq	.+14     	; 0x530 <__fixunssfsi+0x4c>
 522:	b9 3f       	cpi	r27, 0xF9	; 249
 524:	cc f3       	brlt	.-14     	; 0x518 <__fixunssfsi+0x34>
 526:	86 95       	lsr	r24
 528:	77 95       	ror	r23
 52a:	67 95       	ror	r22
 52c:	b3 95       	inc	r27
 52e:	d9 f7       	brne	.-10     	; 0x526 <__fixunssfsi+0x42>
 530:	3e f4       	brtc	.+14     	; 0x540 <__fixunssfsi+0x5c>
 532:	90 95       	com	r25
 534:	80 95       	com	r24
 536:	70 95       	com	r23
 538:	61 95       	neg	r22
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	8f 4f       	sbci	r24, 0xFF	; 255
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	08 95       	ret

00000542 <__floatunsisf>:
 542:	e8 94       	clt
 544:	09 c0       	rjmp	.+18     	; 0x558 <__floatsisf+0x12>

00000546 <__floatsisf>:
 546:	97 fb       	bst	r25, 7
 548:	3e f4       	brtc	.+14     	; 0x558 <__floatsisf+0x12>
 54a:	90 95       	com	r25
 54c:	80 95       	com	r24
 54e:	70 95       	com	r23
 550:	61 95       	neg	r22
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	8f 4f       	sbci	r24, 0xFF	; 255
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	99 23       	and	r25, r25
 55a:	a9 f0       	breq	.+42     	; 0x586 <__floatsisf+0x40>
 55c:	f9 2f       	mov	r31, r25
 55e:	96 e9       	ldi	r25, 0x96	; 150
 560:	bb 27       	eor	r27, r27
 562:	93 95       	inc	r25
 564:	f6 95       	lsr	r31
 566:	87 95       	ror	r24
 568:	77 95       	ror	r23
 56a:	67 95       	ror	r22
 56c:	b7 95       	ror	r27
 56e:	f1 11       	cpse	r31, r1
 570:	f8 cf       	rjmp	.-16     	; 0x562 <__floatsisf+0x1c>
 572:	fa f4       	brpl	.+62     	; 0x5b2 <__floatsisf+0x6c>
 574:	bb 0f       	add	r27, r27
 576:	11 f4       	brne	.+4      	; 0x57c <__floatsisf+0x36>
 578:	60 ff       	sbrs	r22, 0
 57a:	1b c0       	rjmp	.+54     	; 0x5b2 <__floatsisf+0x6c>
 57c:	6f 5f       	subi	r22, 0xFF	; 255
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	16 c0       	rjmp	.+44     	; 0x5b2 <__floatsisf+0x6c>
 586:	88 23       	and	r24, r24
 588:	11 f0       	breq	.+4      	; 0x58e <__floatsisf+0x48>
 58a:	96 e9       	ldi	r25, 0x96	; 150
 58c:	11 c0       	rjmp	.+34     	; 0x5b0 <__floatsisf+0x6a>
 58e:	77 23       	and	r23, r23
 590:	21 f0       	breq	.+8      	; 0x59a <__floatsisf+0x54>
 592:	9e e8       	ldi	r25, 0x8E	; 142
 594:	87 2f       	mov	r24, r23
 596:	76 2f       	mov	r23, r22
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <__floatsisf+0x5e>
 59a:	66 23       	and	r22, r22
 59c:	71 f0       	breq	.+28     	; 0x5ba <__floatsisf+0x74>
 59e:	96 e8       	ldi	r25, 0x86	; 134
 5a0:	86 2f       	mov	r24, r22
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	2a f0       	brmi	.+10     	; 0x5b2 <__floatsisf+0x6c>
 5a8:	9a 95       	dec	r25
 5aa:	66 0f       	add	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	da f7       	brpl	.-10     	; 0x5a8 <__floatsisf+0x62>
 5b2:	88 0f       	add	r24, r24
 5b4:	96 95       	lsr	r25
 5b6:	87 95       	ror	r24
 5b8:	97 f9       	bld	r25, 7
 5ba:	08 95       	ret

000005bc <__fp_inf>:
 5bc:	97 f9       	bld	r25, 7
 5be:	9f 67       	ori	r25, 0x7F	; 127
 5c0:	80 e8       	ldi	r24, 0x80	; 128
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	08 95       	ret

000005c8 <__fp_nan>:
 5c8:	9f ef       	ldi	r25, 0xFF	; 255
 5ca:	80 ec       	ldi	r24, 0xC0	; 192
 5cc:	08 95       	ret

000005ce <__fp_pscA>:
 5ce:	00 24       	eor	r0, r0
 5d0:	0a 94       	dec	r0
 5d2:	16 16       	cp	r1, r22
 5d4:	17 06       	cpc	r1, r23
 5d6:	18 06       	cpc	r1, r24
 5d8:	09 06       	cpc	r0, r25
 5da:	08 95       	ret

000005dc <__fp_pscB>:
 5dc:	00 24       	eor	r0, r0
 5de:	0a 94       	dec	r0
 5e0:	12 16       	cp	r1, r18
 5e2:	13 06       	cpc	r1, r19
 5e4:	14 06       	cpc	r1, r20
 5e6:	05 06       	cpc	r0, r21
 5e8:	08 95       	ret

000005ea <__fp_round>:
 5ea:	09 2e       	mov	r0, r25
 5ec:	03 94       	inc	r0
 5ee:	00 0c       	add	r0, r0
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <__fp_round+0xc>
 5f2:	88 23       	and	r24, r24
 5f4:	52 f0       	brmi	.+20     	; 0x60a <__fp_round+0x20>
 5f6:	bb 0f       	add	r27, r27
 5f8:	40 f4       	brcc	.+16     	; 0x60a <__fp_round+0x20>
 5fa:	bf 2b       	or	r27, r31
 5fc:	11 f4       	brne	.+4      	; 0x602 <__fp_round+0x18>
 5fe:	60 ff       	sbrs	r22, 0
 600:	04 c0       	rjmp	.+8      	; 0x60a <__fp_round+0x20>
 602:	6f 5f       	subi	r22, 0xFF	; 255
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	8f 4f       	sbci	r24, 0xFF	; 255
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	08 95       	ret

0000060c <__fp_split3>:
 60c:	57 fd       	sbrc	r21, 7
 60e:	90 58       	subi	r25, 0x80	; 128
 610:	44 0f       	add	r20, r20
 612:	55 1f       	adc	r21, r21
 614:	59 f0       	breq	.+22     	; 0x62c <__fp_splitA+0x10>
 616:	5f 3f       	cpi	r21, 0xFF	; 255
 618:	71 f0       	breq	.+28     	; 0x636 <__fp_splitA+0x1a>
 61a:	47 95       	ror	r20

0000061c <__fp_splitA>:
 61c:	88 0f       	add	r24, r24
 61e:	97 fb       	bst	r25, 7
 620:	99 1f       	adc	r25, r25
 622:	61 f0       	breq	.+24     	; 0x63c <__fp_splitA+0x20>
 624:	9f 3f       	cpi	r25, 0xFF	; 255
 626:	79 f0       	breq	.+30     	; 0x646 <__fp_splitA+0x2a>
 628:	87 95       	ror	r24
 62a:	08 95       	ret
 62c:	12 16       	cp	r1, r18
 62e:	13 06       	cpc	r1, r19
 630:	14 06       	cpc	r1, r20
 632:	55 1f       	adc	r21, r21
 634:	f2 cf       	rjmp	.-28     	; 0x61a <__fp_split3+0xe>
 636:	46 95       	lsr	r20
 638:	f1 df       	rcall	.-30     	; 0x61c <__fp_splitA>
 63a:	08 c0       	rjmp	.+16     	; 0x64c <__fp_splitA+0x30>
 63c:	16 16       	cp	r1, r22
 63e:	17 06       	cpc	r1, r23
 640:	18 06       	cpc	r1, r24
 642:	99 1f       	adc	r25, r25
 644:	f1 cf       	rjmp	.-30     	; 0x628 <__fp_splitA+0xc>
 646:	86 95       	lsr	r24
 648:	71 05       	cpc	r23, r1
 64a:	61 05       	cpc	r22, r1
 64c:	08 94       	sec
 64e:	08 95       	ret

00000650 <__fp_zero>:
 650:	e8 94       	clt

00000652 <__fp_szero>:
 652:	bb 27       	eor	r27, r27
 654:	66 27       	eor	r22, r22
 656:	77 27       	eor	r23, r23
 658:	cb 01       	movw	r24, r22
 65a:	97 f9       	bld	r25, 7
 65c:	08 95       	ret

0000065e <__mulsf3>:
 65e:	0e 94 42 03 	call	0x684	; 0x684 <__mulsf3x>
 662:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_round>
 666:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_pscA>
 66a:	38 f0       	brcs	.+14     	; 0x67a <__mulsf3+0x1c>
 66c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__fp_pscB>
 670:	20 f0       	brcs	.+8      	; 0x67a <__mulsf3+0x1c>
 672:	95 23       	and	r25, r21
 674:	11 f0       	breq	.+4      	; 0x67a <__mulsf3+0x1c>
 676:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__fp_inf>
 67a:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_nan>
 67e:	11 24       	eor	r1, r1
 680:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_szero>

00000684 <__mulsf3x>:
 684:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_split3>
 688:	70 f3       	brcs	.-36     	; 0x666 <__mulsf3+0x8>

0000068a <__mulsf3_pse>:
 68a:	95 9f       	mul	r25, r21
 68c:	c1 f3       	breq	.-16     	; 0x67e <__mulsf3+0x20>
 68e:	95 0f       	add	r25, r21
 690:	50 e0       	ldi	r21, 0x00	; 0
 692:	55 1f       	adc	r21, r21
 694:	62 9f       	mul	r22, r18
 696:	f0 01       	movw	r30, r0
 698:	72 9f       	mul	r23, r18
 69a:	bb 27       	eor	r27, r27
 69c:	f0 0d       	add	r31, r0
 69e:	b1 1d       	adc	r27, r1
 6a0:	63 9f       	mul	r22, r19
 6a2:	aa 27       	eor	r26, r26
 6a4:	f0 0d       	add	r31, r0
 6a6:	b1 1d       	adc	r27, r1
 6a8:	aa 1f       	adc	r26, r26
 6aa:	64 9f       	mul	r22, r20
 6ac:	66 27       	eor	r22, r22
 6ae:	b0 0d       	add	r27, r0
 6b0:	a1 1d       	adc	r26, r1
 6b2:	66 1f       	adc	r22, r22
 6b4:	82 9f       	mul	r24, r18
 6b6:	22 27       	eor	r18, r18
 6b8:	b0 0d       	add	r27, r0
 6ba:	a1 1d       	adc	r26, r1
 6bc:	62 1f       	adc	r22, r18
 6be:	73 9f       	mul	r23, r19
 6c0:	b0 0d       	add	r27, r0
 6c2:	a1 1d       	adc	r26, r1
 6c4:	62 1f       	adc	r22, r18
 6c6:	83 9f       	mul	r24, r19
 6c8:	a0 0d       	add	r26, r0
 6ca:	61 1d       	adc	r22, r1
 6cc:	22 1f       	adc	r18, r18
 6ce:	74 9f       	mul	r23, r20
 6d0:	33 27       	eor	r19, r19
 6d2:	a0 0d       	add	r26, r0
 6d4:	61 1d       	adc	r22, r1
 6d6:	23 1f       	adc	r18, r19
 6d8:	84 9f       	mul	r24, r20
 6da:	60 0d       	add	r22, r0
 6dc:	21 1d       	adc	r18, r1
 6de:	82 2f       	mov	r24, r18
 6e0:	76 2f       	mov	r23, r22
 6e2:	6a 2f       	mov	r22, r26
 6e4:	11 24       	eor	r1, r1
 6e6:	9f 57       	subi	r25, 0x7F	; 127
 6e8:	50 40       	sbci	r21, 0x00	; 0
 6ea:	9a f0       	brmi	.+38     	; 0x712 <__mulsf3_pse+0x88>
 6ec:	f1 f0       	breq	.+60     	; 0x72a <__mulsf3_pse+0xa0>
 6ee:	88 23       	and	r24, r24
 6f0:	4a f0       	brmi	.+18     	; 0x704 <__mulsf3_pse+0x7a>
 6f2:	ee 0f       	add	r30, r30
 6f4:	ff 1f       	adc	r31, r31
 6f6:	bb 1f       	adc	r27, r27
 6f8:	66 1f       	adc	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	88 1f       	adc	r24, r24
 6fe:	91 50       	subi	r25, 0x01	; 1
 700:	50 40       	sbci	r21, 0x00	; 0
 702:	a9 f7       	brne	.-22     	; 0x6ee <__mulsf3_pse+0x64>
 704:	9e 3f       	cpi	r25, 0xFE	; 254
 706:	51 05       	cpc	r21, r1
 708:	80 f0       	brcs	.+32     	; 0x72a <__mulsf3_pse+0xa0>
 70a:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__fp_inf>
 70e:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_szero>
 712:	5f 3f       	cpi	r21, 0xFF	; 255
 714:	e4 f3       	brlt	.-8      	; 0x70e <__mulsf3_pse+0x84>
 716:	98 3e       	cpi	r25, 0xE8	; 232
 718:	d4 f3       	brlt	.-12     	; 0x70e <__mulsf3_pse+0x84>
 71a:	86 95       	lsr	r24
 71c:	77 95       	ror	r23
 71e:	67 95       	ror	r22
 720:	b7 95       	ror	r27
 722:	f7 95       	ror	r31
 724:	e7 95       	ror	r30
 726:	9f 5f       	subi	r25, 0xFF	; 255
 728:	c1 f7       	brne	.-16     	; 0x71a <__mulsf3_pse+0x90>
 72a:	fe 2b       	or	r31, r30
 72c:	88 0f       	add	r24, r24
 72e:	91 1d       	adc	r25, r1
 730:	96 95       	lsr	r25
 732:	87 95       	ror	r24
 734:	97 f9       	bld	r25, 7
 736:	08 95       	ret

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
